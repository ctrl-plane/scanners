/* tslint:disable */
/* eslint-disable */
/**
 * Target Provider API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetTargetProviderByName200Response,
  SetTargetProvidersTargetsRequest,
} from '../models/index';
import {
    GetTargetProviderByName200ResponseFromJSON,
    GetTargetProviderByName200ResponseToJSON,
    SetTargetProvidersTargetsRequestFromJSON,
    SetTargetProvidersTargetsRequestToJSON,
} from '../models/index';

export interface GetTargetProviderByNameRequest {
    workspace: string;
    name: string;
}

export interface SetTargetProvidersTargetsOperationRequest {
    workspace: string;
    providerId: string;
    setTargetProvidersTargetsRequest: SetTargetProvidersTargetsRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Upserts a target provider.
     */
    async getTargetProviderByNameRaw(requestParameters: GetTargetProviderByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTargetProviderByName200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getTargetProviderByName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getTargetProviderByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/{workspace}/target-provider/name/${name}`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTargetProviderByName200ResponseFromJSON(jsonValue));
    }

    /**
     * Upserts a target provider.
     */
    async getTargetProviderByName(requestParameters: GetTargetProviderByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTargetProviderByName200Response> {
        const response = await this.getTargetProviderByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the target for a provider.
     */
    async setTargetProvidersTargetsRaw(requestParameters: SetTargetProvidersTargetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling setTargetProvidersTargets().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling setTargetProvidersTargets().'
            );
        }

        if (requestParameters['setTargetProvidersTargetsRequest'] == null) {
            throw new runtime.RequiredError(
                'setTargetProvidersTargetsRequest',
                'Required parameter "setTargetProvidersTargetsRequest" was null or undefined when calling setTargetProvidersTargets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{workspace}/target-provider/{providerId}/set`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SetTargetProvidersTargetsRequestToJSON(requestParameters['setTargetProvidersTargetsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the target for a provider.
     */
    async setTargetProvidersTargets(requestParameters: SetTargetProvidersTargetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setTargetProvidersTargetsRaw(requestParameters, initOverrides);
    }

}
