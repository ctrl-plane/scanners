/* tslint:disable */
/* eslint-disable */
/**
 * Ctrlplane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcknowledgeJob200Response,
  AcknowledgeJobRequest,
  GetJobExecution200Response,
  GetNextJobs200Response,
  SetTargetProvidersTargetsRequest,
  UpdateJobDispatcher200Response,
  UpdateJobDispatcherRequest,
  UpdateJobExecutionRequest,
} from '../models/index';
import {
    AcknowledgeJob200ResponseFromJSON,
    AcknowledgeJob200ResponseToJSON,
    AcknowledgeJobRequestFromJSON,
    AcknowledgeJobRequestToJSON,
    GetJobExecution200ResponseFromJSON,
    GetJobExecution200ResponseToJSON,
    GetNextJobs200ResponseFromJSON,
    GetNextJobs200ResponseToJSON,
    SetTargetProvidersTargetsRequestFromJSON,
    SetTargetProvidersTargetsRequestToJSON,
    UpdateJobDispatcher200ResponseFromJSON,
    UpdateJobDispatcher200ResponseToJSON,
    UpdateJobDispatcherRequestFromJSON,
    UpdateJobDispatcherRequestToJSON,
    UpdateJobExecutionRequestFromJSON,
    UpdateJobExecutionRequestToJSON,
} from '../models/index';

export interface AcknowledgeJobOperationRequest {
    dispatcherId: string;
    acknowledgeJobRequest: AcknowledgeJobRequest;
}

export interface GetJobExecutionRequest {
    executionId: string;
}

export interface GetNextJobsRequest {
    dispatcherId: string;
}

export interface SetTargetProvidersTargetsOperationRequest {
    workspace: string;
    providerId: string;
    setTargetProvidersTargetsRequest: SetTargetProvidersTargetsRequest;
}

export interface UpdateJobDispatcherOperationRequest {
    workspace: string;
    updateJobDispatcherRequest: UpdateJobDispatcherRequest;
}

export interface UpdateJobExecutionOperationRequest {
    executionId: string;
    updateJobExecutionRequest: UpdateJobExecutionRequest;
}

export interface UpsertTargetProviderRequest {
    workspace: string;
    name: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Acknowledge a job
     */
    async acknowledgeJobRaw(requestParameters: AcknowledgeJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcknowledgeJob200Response>> {
        if (requestParameters['dispatcherId'] == null) {
            throw new runtime.RequiredError(
                'dispatcherId',
                'Required parameter "dispatcherId" was null or undefined when calling acknowledgeJob().'
            );
        }

        if (requestParameters['acknowledgeJobRequest'] == null) {
            throw new runtime.RequiredError(
                'acknowledgeJobRequest',
                'Required parameter "acknowledgeJobRequest" was null or undefined when calling acknowledgeJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/job/dispatchers/{dispatcherId}/queue/achnowledge`.replace(`{${"dispatcherId"}}`, encodeURIComponent(String(requestParameters['dispatcherId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcknowledgeJobRequestToJSON(requestParameters['acknowledgeJobRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcknowledgeJob200ResponseFromJSON(jsonValue));
    }

    /**
     * Acknowledge a job
     */
    async acknowledgeJob(requestParameters: AcknowledgeJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcknowledgeJob200Response> {
        const response = await this.acknowledgeJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a job execution
     */
    async getJobExecutionRaw(requestParameters: GetJobExecutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJobExecution200Response>> {
        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling getJobExecution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/job/executions/{executionId}`.replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJobExecution200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a job execution
     */
    async getJobExecution(requestParameters: GetJobExecutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJobExecution200Response> {
        const response = await this.getJobExecutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the next jobs
     */
    async getNextJobsRaw(requestParameters: GetNextJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNextJobs200Response>> {
        if (requestParameters['dispatcherId'] == null) {
            throw new runtime.RequiredError(
                'dispatcherId',
                'Required parameter "dispatcherId" was null or undefined when calling getNextJobs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/job/dispatchers/{dispatcherId}/queue/next`.replace(`{${"dispatcherId"}}`, encodeURIComponent(String(requestParameters['dispatcherId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNextJobs200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the next jobs
     */
    async getNextJobs(requestParameters: GetNextJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNextJobs200Response> {
        const response = await this.getNextJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the target for a provider.
     */
    async setTargetProvidersTargetsRaw(requestParameters: SetTargetProvidersTargetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling setTargetProvidersTargets().'
            );
        }

        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling setTargetProvidersTargets().'
            );
        }

        if (requestParameters['setTargetProvidersTargetsRequest'] == null) {
            throw new runtime.RequiredError(
                'setTargetProvidersTargetsRequest',
                'Required parameter "setTargetProvidersTargetsRequest" was null or undefined when calling setTargetProvidersTargets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{workspace}/target-provider/{providerId}/set`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SetTargetProvidersTargetsRequestToJSON(requestParameters['setTargetProvidersTargetsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the target for a provider.
     */
    async setTargetProvidersTargets(requestParameters: SetTargetProvidersTargetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setTargetProvidersTargetsRaw(requestParameters, initOverrides);
    }

    /**
     * Upserts the dispatcher
     */
    async updateJobDispatcherRaw(requestParameters: UpdateJobDispatcherOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateJobDispatcher200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling updateJobDispatcher().'
            );
        }

        if (requestParameters['updateJobDispatcherRequest'] == null) {
            throw new runtime.RequiredError(
                'updateJobDispatcherRequest',
                'Required parameter "updateJobDispatcherRequest" was null or undefined when calling updateJobDispatcher().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{workspace}/job/dispatcher/name`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateJobDispatcherRequestToJSON(requestParameters['updateJobDispatcherRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateJobDispatcher200ResponseFromJSON(jsonValue));
    }

    /**
     * Upserts the dispatcher
     */
    async updateJobDispatcher(requestParameters: UpdateJobDispatcherOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateJobDispatcher200Response> {
        const response = await this.updateJobDispatcherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a job execution
     */
    async updateJobExecutionRaw(requestParameters: UpdateJobExecutionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcknowledgeJob200Response>> {
        if (requestParameters['executionId'] == null) {
            throw new runtime.RequiredError(
                'executionId',
                'Required parameter "executionId" was null or undefined when calling updateJobExecution().'
            );
        }

        if (requestParameters['updateJobExecutionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateJobExecutionRequest',
                'Required parameter "updateJobExecutionRequest" was null or undefined when calling updateJobExecution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/job/executions/{executionId}`.replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters['executionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateJobExecutionRequestToJSON(requestParameters['updateJobExecutionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcknowledgeJob200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a job execution
     */
    async updateJobExecution(requestParameters: UpdateJobExecutionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcknowledgeJob200Response> {
        const response = await this.updateJobExecutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upserts a target provider.
     */
    async upsertTargetProviderRaw(requestParameters: UpsertTargetProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateJobDispatcher200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling upsertTargetProvider().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling upsertTargetProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/{workspace}/target-provider/name/{name}`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateJobDispatcher200ResponseFromJSON(jsonValue));
    }

    /**
     * Upserts a target provider.
     */
    async upsertTargetProvider(requestParameters: UpsertTargetProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateJobDispatcher200Response> {
        const response = await this.upsertTargetProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
