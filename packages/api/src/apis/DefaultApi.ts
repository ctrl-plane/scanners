/* tslint:disable */
/* eslint-disable */
/**
 * Deployment Targets API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetScannerByName200Response,
  SetScannersDeploymentTargetRequestInner,
} from '../models/index';
import {
    GetScannerByName200ResponseFromJSON,
    GetScannerByName200ResponseToJSON,
    SetScannersDeploymentTargetRequestInnerFromJSON,
    SetScannersDeploymentTargetRequestInnerToJSON,
} from '../models/index';

export interface GetScannerByNameRequest {
    workspace: string;
    name: string;
}

export interface SetScannersDeploymentTargetRequest {
    workspace: string;
    scannerId: string;
    setScannersDeploymentTargetRequestInner: Array<SetScannersDeploymentTargetRequestInner>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get a scanner by name
     */
    async getScannerByNameRaw(requestParameters: GetScannerByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetScannerByName200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getScannerByName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getScannerByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/{workspace}/scanners/name/${name}`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetScannerByName200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a scanner by name
     */
    async getScannerByName(requestParameters: GetScannerByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetScannerByName200Response> {
        const response = await this.getScannerByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the deployment target for a scanner
     */
    async setScannersDeploymentTargetRaw(requestParameters: SetScannersDeploymentTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling setScannersDeploymentTarget().'
            );
        }

        if (requestParameters['scannerId'] == null) {
            throw new runtime.RequiredError(
                'scannerId',
                'Required parameter "scannerId" was null or undefined when calling setScannersDeploymentTarget().'
            );
        }

        if (requestParameters['setScannersDeploymentTargetRequestInner'] == null) {
            throw new runtime.RequiredError(
                'setScannersDeploymentTargetRequestInner',
                'Required parameter "setScannersDeploymentTargetRequestInner" was null or undefined when calling setScannersDeploymentTarget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{workspace}/scanners/{scannerId}/deployment-targets/set`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"scannerId"}}`, encodeURIComponent(String(requestParameters['scannerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['setScannersDeploymentTargetRequestInner']!.map(SetScannersDeploymentTargetRequestInnerToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the deployment target for a scanner
     */
    async setScannersDeploymentTarget(requestParameters: SetScannersDeploymentTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setScannersDeploymentTargetRaw(requestParameters, initOverrides);
    }

}
