/* tslint:disable */
/* eslint-disable */
/**
 * Target Provider API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetProviderByName200Response,
  SetProvidersTargetsRequestInner,
} from '../models/index';
import {
    GetProviderByName200ResponseFromJSON,
    GetProviderByName200ResponseToJSON,
    SetProvidersTargetsRequestInnerFromJSON,
    SetProvidersTargetsRequestInnerToJSON,
} from '../models/index';

export interface GetProviderByNameRequest {
    workspace: string;
    name: string;
}

export interface SetProvidersTargetsRequest {
    workspace: string;
    scannerId: string;
    setProvidersTargetsRequestInner: Array<SetProvidersTargetsRequestInner>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get a provider by name
     */
    async getProviderByNameRaw(requestParameters: GetProviderByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProviderByName200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getProviderByName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getProviderByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/{workspace}/scanners/name/${name}`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProviderByName200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a provider by name
     */
    async getProviderByName(requestParameters: GetProviderByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProviderByName200Response> {
        const response = await this.getProviderByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the target for a provider.
     */
    async setProvidersTargetsRaw(requestParameters: SetProvidersTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling setProvidersTargets().'
            );
        }

        if (requestParameters['scannerId'] == null) {
            throw new runtime.RequiredError(
                'scannerId',
                'Required parameter "scannerId" was null or undefined when calling setProvidersTargets().'
            );
        }

        if (requestParameters['setProvidersTargetsRequestInner'] == null) {
            throw new runtime.RequiredError(
                'setProvidersTargetsRequestInner',
                'Required parameter "setProvidersTargetsRequestInner" was null or undefined when calling setProvidersTargets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/{workspace}/scanners/{scannerId}/-targets/set`.replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters['workspace']))).replace(`{${"scannerId"}}`, encodeURIComponent(String(requestParameters['scannerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['setProvidersTargetsRequestInner']!.map(SetProvidersTargetsRequestInnerToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the target for a provider.
     */
    async setProvidersTargets(requestParameters: SetProvidersTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setProvidersTargetsRaw(requestParameters, initOverrides);
    }

}
